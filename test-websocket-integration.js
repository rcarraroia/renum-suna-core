#!/usr/bin/env node

/**
 * Script de teste integrado para validar conex√£o WebSocket
 * 
 * Este script testa a conectividade WebSocket entre frontend e backend
 * para verificar se as corre√ß√µes implementadas est√£o funcionando.
 */

const WebSocket = require('ws');
const http = require('http');

console.log('üîç Testando integra√ß√£o WebSocket...\n');

// Configura√ß√µes de teste
const BACKEND_URL = 'http://localhost:8000';
const WEBSOCKET_URL = 'ws://localhost:8000/ws';

// Fun√ß√£o para testar se o backend est√° rodando
async function testBackendHealth() {
    console.log('1. ‚úÖ Testando sa√∫de do backend:');
    
    return new Promise((resolve) => {
        const req = http.get(`${BACKEND_URL}/api/health`, (res) => {
            if (res.statusCode === 200) {
                console.log('   ‚úÖ Backend est√° rodando e respondendo');
                resolve(true);
            } else {
                console.log(`   ‚ùå Backend respondeu com status ${res.statusCode}`);
                resolve(false);
            }
        });
        
        req.on('error', (err) => {
            console.log(`   ‚ùå Erro ao conectar com backend: ${err.message}`);
            resolve(false);
        });
        
        req.setTimeout(5000, () => {
            console.log('   ‚ùå Timeout ao conectar com backend');
            req.destroy();
            resolve(false);
        });
    });
}

// Fun√ß√£o para testar endpoints WebSocket espec√≠ficos
async function testWebSocketEndpoints() {
    console.log('\n2. ‚úÖ Testando endpoints WebSocket:');
    
    const endpoints = [
        '/ws/health',
        '/ws/stats'
    ];
    
    for (const endpoint of endpoints) {
        await new Promise((resolve) => {
            const req = http.get(`${BACKEND_URL}${endpoint}`, (res) => {
                if (res.statusCode === 200) {
                    console.log(`   ‚úÖ ${endpoint}: Respondendo corretamente`);
                } else {
                    console.log(`   ‚ùå ${endpoint}: Status ${res.statusCode}`);
                }
                resolve();
            });
            
            req.on('error', (err) => {
                console.log(`   ‚ùå ${endpoint}: Erro - ${err.message}`);
                resolve();
            });
            
            req.setTimeout(3000, () => {
                console.log(`   ‚ùå ${endpoint}: Timeout`);
                req.destroy();
                resolve();
            });
        });
    }
}

// Fun√ß√£o para testar conex√£o WebSocket
async function testWebSocketConnection() {
    console.log('\n3. ‚úÖ Testando conex√£o WebSocket:');
    
    return new Promise((resolve) => {
        let connected = false;
        let messageReceived = false;
        
        const ws = new WebSocket(WEBSOCKET_URL);
        
        const timeout = setTimeout(() => {
            if (!connected) {
                console.log('   ‚ùå Timeout na conex√£o WebSocket');
                ws.close();
                resolve(false);
            }
        }, 10000);
        
        ws.on('open', () => {
            console.log('   ‚úÖ Conex√£o WebSocket estabelecida');
            connected = true;
            
            // Enviar mensagem de teste
            const testMessage = {
                type: 'ping',
                timestamp: new Date().toISOString()
            };
            
            ws.send(JSON.stringify(testMessage));
            console.log('   ‚úÖ Mensagem de ping enviada');
        });
        
        ws.on('message', (data) => {
            try {
                const message = JSON.parse(data.toString());
                console.log(`   ‚úÖ Mensagem recebida: ${message.type}`);
                messageReceived = true;
                
                // Fechar conex√£o ap√≥s receber resposta
                setTimeout(() => {
                    ws.close();
                }, 1000);
            } catch (error) {
                console.log(`   ‚ùå Erro ao parsear mensagem: ${error.message}`);
            }
        });
        
        ws.on('close', (code, reason) => {
            clearTimeout(timeout);
            console.log(`   ‚úÖ Conex√£o WebSocket fechada: ${code} ${reason}`);
            resolve(connected && messageReceived);
        });
        
        ws.on('error', (error) => {
            clearTimeout(timeout);
            console.log(`   ‚ùå Erro na conex√£o WebSocket: ${error.message}`);
            resolve(false);
        });
    });
}

// Fun√ß√£o para testar autentica√ß√£o (simulada)
async function testWebSocketAuth() {
    console.log('\n4. ‚úÖ Testando autentica√ß√£o WebSocket:');
    
    return new Promise((resolve) => {
        // Simular token JWT (em produ√ß√£o, seria obtido do sistema de auth)
        const mockToken = 'mock-jwt-token-for-testing';
        const wsUrlWithToken = `${WEBSOCKET_URL}?token=${encodeURIComponent(mockToken)}`;
        
        const ws = new WebSocket(wsUrlWithToken);
        
        const timeout = setTimeout(() => {
            console.log('   ‚ö†Ô∏è  Timeout na conex√£o com token (esperado se n√£o houver token v√°lido)');
            ws.close();
            resolve(true); // Consideramos sucesso pois o sistema deve rejeitar tokens inv√°lidos
        }, 5000);
        
        ws.on('open', () => {
            console.log('   ‚úÖ Conex√£o com token estabelecida (sistema de fallback funcionando)');
            clearTimeout(timeout);
            ws.close();
            resolve(true);
        });
        
        ws.on('close', (code, reason) => {
            clearTimeout(timeout);
            if (code === 1000) {
                console.log('   ‚úÖ Conex√£o fechada normalmente');
            } else {
                console.log(`   ‚ö†Ô∏è  Conex√£o fechada com c√≥digo ${code} (pode ser esperado para token inv√°lido)`);
            }
            resolve(true);
        });
        
        ws.on('error', (error) => {
            clearTimeout(timeout);
            console.log(`   ‚ö†Ô∏è  Erro esperado com token inv√°lido: ${error.message}`);
            resolve(true); // Erro esperado para token inv√°lido
        });
    });
}

// Fun√ß√£o principal
async function main() {
    try {
        // Testar sa√∫de do backend
        const backendHealthy = await testBackendHealth();
        
        if (!backendHealthy) {
            console.log('\n‚ùå Backend n√£o est√° rodando. Inicie o backend primeiro:');
            console.log('   cd backend && python api.py');
            return;
        }
        
        // Testar endpoints WebSocket
        await testWebSocketEndpoints();
        
        // Testar conex√£o WebSocket
        const websocketWorking = await testWebSocketConnection();
        
        // Testar autentica√ß√£o
        await testWebSocketAuth();
        
        // Resumo final
        console.log('\nüéØ Resumo dos testes:');
        console.log(`   Backend: ${backendHealthy ? '‚úÖ Funcionando' : '‚ùå Com problemas'}`);
        console.log(`   WebSocket: ${websocketWorking ? '‚úÖ Funcionando' : '‚ùå Com problemas'}`);
        
        if (backendHealthy && websocketWorking) {
            console.log('\nüéâ Todos os testes passaram! As corre√ß√µes WebSocket est√£o funcionando.');
            console.log('\nüìã Pr√≥ximos passos:');
            console.log('   1. Testar no frontend React (npm run dev)');
            console.log('   2. Verificar logs do backend para conex√µes WebSocket');
            console.log('   3. Testar em ambiente de produ√ß√£o (Vercel)');
        } else {
            console.log('\n‚ö†Ô∏è  Alguns testes falharam. Verifique:');
            console.log('   1. Se o backend est√° rodando (python api.py)');
            console.log('   2. Se n√£o h√° firewall bloqueando a porta 8000');
            console.log('   3. Se as configura√ß√µes de CORS est√£o corretas');
        }
        
    } catch (error) {
        console.error('\n‚ùå Erro durante os testes:', error.message);
    }
}

// Executar testes
main().catch(console.error);