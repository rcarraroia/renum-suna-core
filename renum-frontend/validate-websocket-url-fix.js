/**
 * Script de valida√ß√£o para verificar se a corre√ß√£o da URL do WebSocket foi aplicada corretamente
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Validando corre√ß√£o da URL do WebSocket...\n');

// Arquivos que devem usar a vari√°vel de ambiente
const filesToCheck = [
  'src/constants/websocket.ts',
  'src/hooks/useWebSocket.ts'
];

let allValid = true;

filesToCheck.forEach(filePath => {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ùå Arquivo n√£o encontrado: ${filePath}`);
    allValid = false;
    return;
  }

  const content = fs.readFileSync(fullPath, 'utf8');
  
  // Verifica se usa a vari√°vel de ambiente
  const hasEnvVar = content.includes('process.env.NEXT_PUBLIC_WEBSOCKET_URL');
  
  // Verifica se ainda tem URL hardcoded sem fallback
  const hasHardcodedUrl = content.includes("'ws://localhost:8000/ws'") && 
                         !content.includes('process.env.NEXT_PUBLIC_WEBSOCKET_URL ||');

  console.log(`üìÅ ${filePath}:`);
  
  if (hasEnvVar && !hasHardcodedUrl) {
    console.log('  ‚úÖ Usa vari√°vel de ambiente NEXT_PUBLIC_WEBSOCKET_URL');
    console.log('  ‚úÖ Tem fallback para desenvolvimento');
  } else if (hasHardcodedUrl) {
    console.log('  ‚ùå Ainda cont√©m URL hardcoded sem usar vari√°vel de ambiente');
    allValid = false;
  } else {
    console.log('  ‚ö†Ô∏è  Configura√ß√£o n√£o encontrada ou formato inesperado');
    allValid = false;
  }
  
  console.log('');
});

// Verifica se a vari√°vel de ambiente est√° documentada
const envExamplePath = path.join(__dirname, '.env.development');
if (fs.existsSync(envExamplePath)) {
  const envContent = fs.readFileSync(envExamplePath, 'utf8');
  if (envContent.includes('NEXT_PUBLIC_WEBSOCKET_URL')) {
    console.log('‚úÖ Vari√°vel NEXT_PUBLIC_WEBSOCKET_URL documentada em .env.development');
  } else {
    console.log('‚ö†Ô∏è  Vari√°vel NEXT_PUBLIC_WEBSOCKET_URL n√£o encontrada em .env.development');
  }
} else {
  console.log('‚ö†Ô∏è  Arquivo .env.development n√£o encontrado');
}

console.log('\n' + '='.repeat(50));

if (allValid) {
  console.log('üéâ Corre√ß√£o da URL do WebSocket aplicada com sucesso!');
  console.log('');
  console.log('üìã Resumo da corre√ß√£o:');
  console.log('‚Ä¢ URLs hardcoded substitu√≠das por vari√°vel de ambiente');
  console.log('‚Ä¢ Fallback para localhost mantido para desenvolvimento');
  console.log('‚Ä¢ Configura√ß√£o agora usa NEXT_PUBLIC_WEBSOCKET_URL em produ√ß√£o');
  console.log('');
  console.log('üöÄ Pr√≥ximos passos:');
  console.log('1. Fazer commit das altera√ß√µes');
  console.log('2. Fazer deploy no Vercel');
  console.log('3. Verificar se a vari√°vel NEXT_PUBLIC_WEBSOCKET_URL est√° configurada no Vercel');
  process.exit(0);
} else {
  console.log('‚ùå Algumas verifica√ß√µes falharam. Revise os arquivos acima.');
  process.exit(1);
}