#!/usr/bin/env node

/**
 * Script de valida√ß√£o de build local
 * Simula o processo de build do Vercel para detectar erros antes do deploy
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Iniciando valida√ß√£o de build local...\n');

// Fun√ß√£o para executar comandos e capturar output
function runCommand(command, description) {
  console.log(`üìã ${description}...`);
  try {
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    console.log(`‚úÖ ${description} - Sucesso\n`);
    return { success: true, output };
  } catch (error) {
    console.error(`‚ùå ${description} - Falhou`);
    console.error(`Erro: ${error.message}`);
    console.error(`Output: ${error.stdout || error.stderr}\n`);
    return { success: false, error: error.message, output: error.stdout || error.stderr };
  }
}

// Fun√ß√£o para limpar cache
function cleanCache() {
  console.log('üßπ Limpando cache...');
  
  const pathsToClean = [
    '.next',
    'node_modules/.cache',
    '.eslintcache'
  ];
  
  pathsToClean.forEach(pathToClean => {
    if (fs.existsSync(pathToClean)) {
      try {
        if (process.platform === 'win32') {
          execSync(`rmdir /s /q "${pathToClean}"`, { stdio: 'ignore' });
        } else {
          execSync(`rm -rf "${pathToClean}"`, { stdio: 'ignore' });
        }
        console.log(`  ‚úÖ Removido: ${pathToClean}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  N√£o foi poss√≠vel remover: ${pathToClean}`);
      }
    }
  });
  
  console.log('‚úÖ Cache limpo\n');
}

// Fun√ß√£o principal
async function validateBuild() {
  const startTime = Date.now();
  let hasErrors = false;
  
  try {
    // 1. Limpar cache
    cleanCache();
    
    // 2. Verificar se package.json existe
    if (!fs.existsSync('package.json')) {
      console.error('‚ùå package.json n√£o encontrado!');
      process.exit(1);
    }
    
    // 3. Instalar depend√™ncias
    const installResult = runCommand('npm ci', 'Instalando depend√™ncias');
    if (!installResult.success) {
      hasErrors = true;
    }
    
    // 4. Verificar tipos TypeScript
    const typeCheckResult = runCommand('npx tsc --noEmit', 'Verificando tipos TypeScript');
    if (!typeCheckResult.success) {
      hasErrors = true;
    }
    
    // 5. Executar linting
    const lintResult = runCommand('npm run lint', 'Executando ESLint');
    if (!lintResult.success) {
      hasErrors = true;
    }
    
    // 6. Build de produ√ß√£o
    const buildResult = runCommand('npm run build', 'Executando build de produ√ß√£o');
    if (!buildResult.success) {
      hasErrors = true;
    }
    
    // 7. Verificar se os arquivos de build foram criados
    if (fs.existsSync('.next')) {
      console.log('‚úÖ Arquivos de build criados com sucesso');
    } else {
      console.error('‚ùå Arquivos de build n√£o foram criados');
      hasErrors = true;
    }
    
    // Resumo final
    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä RESUMO DA VALIDA√á√ÉO');
    console.log('='.repeat(50));
    console.log(`‚è±Ô∏è  Tempo total: ${duration}s`);
    
    if (hasErrors) {
      console.log('‚ùå Build falhou - Erros encontrados');
      console.log('\nüí° Dicas:');
      console.log('  ‚Ä¢ Corrija os erros TypeScript mostrados acima');
      console.log('  ‚Ä¢ Verifique os avisos do ESLint');
      console.log('  ‚Ä¢ Execute este script novamente ap√≥s as corre√ß√µes');
      process.exit(1);
    } else {
      console.log('‚úÖ Build bem-sucedido - Pronto para deploy!');
      console.log('\nüöÄ Pr√≥ximos passos:');
      console.log('  ‚Ä¢ Fa√ßa commit das suas altera√ß√µes');
      console.log('  ‚Ä¢ Fa√ßa push para o reposit√≥rio');
      console.log('  ‚Ä¢ O deploy no Vercel deve funcionar sem problemas');
      process.exit(0);
    }
    
  } catch (error) {
    console.error('\n‚ùå Erro inesperado durante a valida√ß√£o:');
    console.error(error.message);
    process.exit(1);
  }
}

// Executar valida√ß√£o
validateBuild();