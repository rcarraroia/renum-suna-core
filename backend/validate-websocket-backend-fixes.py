#!/usr/bin/env python3

"""
Script de valida√ß√£o das corre√ß√µes de WebSocket no backend

Este script verifica se as corre√ß√µes implementadas no backend
para resolver as falhas de conex√£o WebSocket est√£o funcionando.
"""

import os
import sys
import re
from pathlib import Path

def main():
    print("üîç Validando corre√ß√µes de WebSocket no backend...\n")
    
    # 1. Verificar configura√ß√£o de CORS
    print("1. ‚úÖ Verificando configura√ß√£o de CORS:")
    
    api_py_path = Path("api.py")
    if api_py_path.exists():
        with open(api_py_path, 'r', encoding='utf-8') as f:
            api_content = f.read()
        
        # Verificar se localhost:3001 foi adicionado
        if 'localhost:3001' in api_content:
            print("   ‚úÖ api.py: localhost:3001 adicionado para desenvolvimento local")
        else:
            print("   ‚ùå api.py: localhost:3001 n√£o encontrado")
        
        # Verificar se dom√≠nios do Renum foram adicionados
        if 'renum.com.br' in api_content:
            print("   ‚úÖ api.py: Dom√≠nios renum.com.br adicionados")
        else:
            print("   ‚ùå api.py: Dom√≠nios renum.com.br n√£o encontrados")
        
        # Verificar regex para Vercel
        if 'renum-.*\.vercel\.app' in api_content:
            print("   ‚úÖ api.py: Regex para Vercel do Renum configurada")
        else:
            print("   ‚ùå api.py: Regex para Vercel do Renum n√£o encontrada")
    else:
        print("   ‚ùå api.py n√£o encontrado")
    
    # 2. Verificar endpoint WebSocket
    print("\n2. ‚úÖ Verificando endpoint WebSocket:")
    
    websocket_final_path = Path("websocket_endpoint_final.py")
    if websocket_final_path.exists():
        print("   ‚úÖ websocket_endpoint_final.py: Encontrado")
        
        with open(websocket_final_path, 'r', encoding='utf-8') as f:
            websocket_content = f.read()
        
        # Verificar se as rotas est√£o configuradas
        if 'setup_websocket_routes' in websocket_content:
            print("   ‚úÖ setup_websocket_routes: Fun√ß√£o encontrada")
        else:
            print("   ‚ùå setup_websocket_routes: Fun√ß√£o n√£o encontrada")
        
        # Verificar endpoints espec√≠ficos
        endpoints = ['/ws', '/ws/stats', '/ws/health', '/ws/broadcast']
        for endpoint in endpoints:
            if endpoint in websocket_content:
                print(f"   ‚úÖ Endpoint {endpoint}: Configurado")
            else:
                print(f"   ‚ùå Endpoint {endpoint}: N√£o encontrado")
    else:
        print("   ‚ùå websocket_endpoint_final.py n√£o encontrado")
    
    # 3. Verificar importa√ß√£o no api.py
    print("\n3. ‚úÖ Verificando importa√ß√£o do WebSocket no api.py:")
    
    if api_py_path.exists():
        with open(api_py_path, 'r', encoding='utf-8') as f:
            api_content = f.read()
        
        if 'from websocket_endpoint_final import setup_websocket_routes' in api_content:
            print("   ‚úÖ api.py: Importa√ß√£o do setup_websocket_routes encontrada")
        else:
            print("   ‚ùå api.py: Importa√ß√£o do setup_websocket_routes n√£o encontrada")
        
        if 'setup_websocket_routes(app)' in api_content:
            print("   ‚úÖ api.py: Chamada do setup_websocket_routes encontrada")
        else:
            print("   ‚ùå api.py: Chamada do setup_websocket_routes n√£o encontrada")
    
    # 4. Verificar servi√ßos de autentica√ß√£o WebSocket
    print("\n4. ‚úÖ Verificando servi√ßos de autentica√ß√£o WebSocket:")
    
    auth_files = [
        "services/websocket_auth_fallback.py",
        "services/improved_token_validator.py"
    ]
    
    for auth_file in auth_files:
        auth_path = Path(auth_file)
        if auth_path.exists():
            print(f"   ‚úÖ {auth_file}: Encontrado")
        else:
            print(f"   ‚ùå {auth_file}: N√£o encontrado")
    
    # 5. Verificar configura√ß√£o de ambiente
    print("\n5. ‚úÖ Verificando configura√ß√£o de ambiente:")
    
    config_path = Path("utils/config.py")
    if config_path.exists():
        print("   ‚úÖ utils/config.py: Encontrado")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config_content = f.read()
        
        if 'EnvMode' in config_content:
            print("   ‚úÖ EnvMode: Enum de ambiente encontrada")
        else:
            print("   ‚ùå EnvMode: Enum de ambiente n√£o encontrada")
    else:
        print("   ‚ùå utils/config.py n√£o encontrado")
    
    print("\nüéØ Resumo das corre√ß√µes implementadas no backend:")
    print("   1. Adicionados dom√≠nios do Renum no CORS (localhost:3001, renum.com.br)")
    print("   2. Configurada regex para Vercel do Renum (renum-*.vercel.app)")
    print("   3. Mantidos endpoints WebSocket funcionais (/ws, /ws/stats, /ws/health)")
    print("   4. Sistema de autentica√ß√£o WebSocket com fallback implementado")
    
    print("\nüìã Pr√≥ximos passos para valida√ß√£o completa:")
    print("   1. Testar conex√£o WebSocket do frontend com o backend")
    print("   2. Validar autentica√ß√£o JWT via WebSocket")
    print("   3. Testar endpoints de sa√∫de e estat√≠sticas")
    print("   4. Verificar logs de conex√£o em tempo real")
    
    print("\n‚úÖ Valida√ß√£o das corre√ß√µes de backend conclu√≠da!")

if __name__ == "__main__":
    main()