#!/usr/bin/env python3
"""
Demonstra√ß√£o das otimiza√ß√µes do sistema operacional
Executa diagn√≥stico, otimiza√ß√£o e testes de valida√ß√£o
"""

import asyncio
import sys
import os
from pathlib import Path

# Adiciona o diret√≥rio backend ao path
sys.path.append(str(Path(__file__).parent))

from utils.system_optimizer import SystemOptimizer
from test_system_optimization import SystemOptimizationTester

async def main():
    """Demonstra√ß√£o completa das otimiza√ß√µes"""
    print("üöÄ DEMONSTRA√á√ÉO DE OTIMIZA√á√ÉO DO SISTEMA PARA WEBSOCKET")
    print("=" * 70)
    
    # Fase 1: Diagn√≥stico inicial
    print("\nüìã FASE 1: DIAGN√ìSTICO INICIAL")
    print("-" * 40)
    
    optimizer = SystemOptimizer()
    
    print("Analisando limites atuais do sistema...")
    limits = await optimizer.diagnose_system_limits()
    
    print("\nLimites encontrados:")
    for name, limit in limits.items():
        status = "‚úÖ" if limit.current_value and limit.current_value >= limit.recommended_value else "‚ö†Ô∏è"
        if limit.critical:
            status = "‚ùå"
        
        current_str = str(limit.current_value) if limit.current_value else "N/A"
        print(f"{status} {name}: {current_str} (recomendado: {limit.recommended_value})")
    
    # Identifica problemas cr√≠ticos
    critical_issues = [name for name, limit in limits.items() if limit.critical]
    if critical_issues:
        print(f"\n‚ùå PROBLEMAS CR√çTICOS ENCONTRADOS: {', '.join(critical_issues)}")
    else:
        print("\n‚úÖ Nenhum problema cr√≠tico encontrado")
    
    # Fase 2: Aplica√ß√£o de otimiza√ß√µes
    print("\nüîß FASE 2: APLICA√á√ÉO DE OTIMIZA√á√ïES")
    print("-" * 40)
    
    print("Aplicando otimiza√ß√µes...")
    results = await optimizer.apply_optimizations(limits)
    
    successful = 0
    failed = 0
    requires_restart = []
    
    for name, result in results.items():
        if result.success:
            successful += 1
            print(f"‚úÖ {name}: {result.message}")
        else:
            failed += 1
            print(f"‚ùå {name}: {result.message}")
        
        if result.requires_restart:
            requires_restart.append(name)
    
    print(f"\nResultado: {successful} sucessos, {failed} falhas")
    
    if requires_restart:
        print(f"‚ö†Ô∏è  Requer reinicializa√ß√£o: {', '.join(requires_restart)}")
    
    # Fase 3: Gera√ß√£o de relat√≥rio
    print("\nüìÑ FASE 3: GERA√á√ÉO DE RELAT√ìRIO")
    print("-" * 40)
    
    report = await optimizer.generate_optimization_report(limits, results)
    
    # Salva relat√≥rio
    report_path = "backend/demo_optimization_report.txt"
    with open(report_path, 'w') as f:
        f.write(report)
    
    print(f"Relat√≥rio detalhado salvo em: {report_path}")
    
    # Cria script de monitoramento
    script_path = await optimizer.create_monitoring_script()
    print(f"Script de monitoramento criado em: {script_path}")
    
    # Fase 4: Testes de valida√ß√£o
    print("\nüß™ FASE 4: TESTES DE VALIDA√á√ÉO")
    print("-" * 40)
    
    print("Executando testes de valida√ß√£o...")
    tester = SystemOptimizationTester()
    
    # Executa apenas alguns testes principais para demo
    test_results = []
    
    # Teste de file descriptors
    print("  ‚Ä¢ Testando file descriptors...")
    fd_result = await tester.test_file_descriptors()
    test_results.append(("File Descriptors", fd_result))
    
    # Teste de mem√≥ria
    print("  ‚Ä¢ Testando limites de mem√≥ria...")
    mem_result = await tester.test_memory_limits()
    test_results.append(("Mem√≥ria", mem_result))
    
    # Teste de capacidade de conex√µes
    print("  ‚Ä¢ Testando capacidade de conex√µes...")
    conn_result = await tester.test_connection_capacity()
    test_results.append(("Conex√µes", conn_result))
    
    # Mostra resultados dos testes
    print("\nResultados dos testes:")
    passed = 0
    for test_name, result in test_results:
        if result['success']:
            print(f"‚úÖ {test_name}: PASSOU")
            passed += 1
        else:
            print(f"‚ùå {test_name}: FALHOU")
        
        # Mostra alguns detalhes
        for detail in result.get('details', [])[:2]:  # Apenas primeiros 2 detalhes
            print(f"   {detail}")
    
    print(f"\nTestes aprovados: {passed}/{len(test_results)}")
    
    # Fase 5: Demonstra√ß√£o de monitoramento
    print("\nüìä FASE 5: DEMONSTRA√á√ÉO DE MONITORAMENTO")
    print("-" * 40)
    
    print("Executando verifica√ß√£o √∫nica de recursos...")
    
    try:
        from monitor_websocket_resources import WebSocketResourceMonitor
        monitor = WebSocketResourceMonitor()
        metrics = await monitor.run_single_check()
        
        print("\n‚úÖ Monitoramento executado com sucesso")
        
    except Exception as e:
        print(f"‚ùå Erro no monitoramento: {e}")
    
    # Resumo final
    print("\nüéØ RESUMO FINAL")
    print("=" * 40)
    
    if critical_issues:
        print("‚ùå Sistema possui problemas cr√≠ticos que precisam ser resolvidos")
    elif failed > successful:
        print("‚ö†Ô∏è  Algumas otimiza√ß√µes falharam, verifique privil√©gios")
    elif requires_restart:
        print("‚ö†Ô∏è  Otimiza√ß√µes aplicadas, mas requer reinicializa√ß√£o")
    else:
        print("‚úÖ Sistema otimizado com sucesso!")
    
    print("\nPr√≥ximos passos:")
    print("1. Revise o relat√≥rio detalhado")
    print("2. Execute o script de monitoramento para acompanhar recursos")
    print("3. Teste as conex√µes WebSocket em ambiente real")
    
    if not optimizer.is_root:
        print("4. Execute como administrador para aplicar todas as otimiza√ß√µes")
    
    if requires_restart:
        print("5. Reinicie o sistema para aplicar configura√ß√µes persistentes")
    
    print("\nüèÅ Demonstra√ß√£o conclu√≠da!")

if __name__ == "__main__":
    asyncio.run(main())